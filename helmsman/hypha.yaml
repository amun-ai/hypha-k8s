# Default values for imjoy-app-engine.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1
acmeEmail: "oeway007@gmail.com"
container: imjoy/imjoy-app-engine
certSecretName: imjoy-app-engine-tls
imjoyHostName: https://hypha.${HOSTNAME}
s3ConsoleHostName: https://hs3c.${HOSTNAME}
s3_endpoint_url_public: https://hs3.${HOSTNAME}
# publicEndpointUrl: hs3.imjoy.io
auth0_audience: https://imjoy.eu.auth0.com/api/v2/
auth0_domain: imjoy.eu.auth0.com
jwt_secret: 352esl345IEo3kjsw3fsdf39sdfl3K23KJE#D*#4d

imagePullPolicy: Always
image:
  # repository: ghcr.io/ctr26/hypha
  repository: ghcr.io/imjoy-team/hypha
# s3_access_key: rootuser
# s3_secret_key: rootpass123
triton_url: "tritoninferenceserver:8000"
# port: 9520
# productionMode: false # using `letsencrypt-prod` if set to true
service:
  name: hypha
  type: ClusterIP
  # sessionAffinity: None
  # sessionAffinityConfig: {}
  # clusterIP:
  port: 9520
  # nodePort:
  # loadBalancerIP:
  # loadBalancerSourceRanges:
  annotations: {}
  # foo.io/bar: "true"

cert-manager:
  enabled: false

redis:
  enabled: false

ingress:
  enabled: true
  className: nginx
  path: /
  # Used to create an Ingress record.
  hosts:
    - ${HOSTNAME}
  annotations:
    # kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.k8s.io/acme-challenge-type: http01
    cert-manager.io/cluster-issuer: letsencrypt
    certmanager.k8s.io/acme-http01-edit-in-place: "true"
  labels: {}
  tls:
    - secretName: tls-secret
      hosts:
        - ${HOSTNAME}

# Best not to enforce strict ingress
ingress-nginx:
  enabled: false
#   rbac:
#     create: true
#   defaultBackend:
#     enabled: true
#   controller:
#     ingressClassResource:
#       default: true

docker-registry:
  enabled: false
  # storage: s3
  # secrets:
  #   s3:
  #     accessKey: imjoy
  #     secretKey: Nbj2cbcUDGGy7QNS8RjCwMrNRXrp2Ms7UXeF
  # s3:
  #   region: EU
  #   regionEndpoint: http://minio-s3:9000
  #   bucket: docker-registry
  #   secure: false
  # service:
  #   port: 5000
  #   nodePort: 31822 # only valid when using NodePort

minio:
  # nameOverride: "minio"
  fullnameOverride: "minio"
  enabled: true
  # rootUser: rootuser
  # rootPassword: rootpass123
  # accessKey: ""
  # secretKey: ""
  replicas: 4
  ingress:
    enabled: true
    annotations:
      # kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      cert-manager.k8s.io/acme-challenge-type: http01
      cert-manager.io/cluster-issuer: letsencrypt
      certmanager.k8s.io/acme-http01-edit-in-place: "true"
    # annotations:
    #   nginx.ingress.kubernetes.io/rewrite-target: /$2
    path: /
    hosts:
      # - imjoy.duckdns.org
      - hs3.${HOSTNAME}
    tls:
      - secretName: hs3-minio
        hosts:
          - hs3.${HOSTNAME}
  resources:
    requests:
      memory: 2Gi
  persistence:
    size: 10Gi
  consoleIngress:
    annotations:
      # kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      cert-manager.k8s.io/acme-challenge-type: http01
      cert-manager.io/cluster-issuer: letsencrypt
      certmanager.k8s.io/acme-http01-edit-in-place: "true"
    enabled: true
    hosts:
      - hs3c.${HOSTNAME}

    tls:
      - secretName: hs3c-minio
        hosts:
          - hs3c.${HOSTNAME}

tritoninfereceserver-hypha:
  enabled: true
  fullnameOverride: "tritoninfereceserver"
  replicaCount: 1
  image:
    imageName: nvcr.io/nvidia/tritonserver:23.04-py3
    pullPolicy: IfNotPresent
    # modelRepositoryPath: s3://imjoy-s3.pasteur.fr:80/model-repository
    modelRepository: s3://http://minio:9000/model-repository
    # modelRepositoryPath: /model-repository
    modelSnapshotsPath: /model-snapshots
    numGpus: 1
    # s3Endpoint: https://uk1s3.embassy.ebi.ac.uk
    # s3Bucket: s3://model-repository/
  ingress:
    enabled: false
    path: /triton(/|$)(.*)
    # Used to create an Ingress record.
    hosts:
      - ${HOSTNAME}
    annotations:
      # kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      cert-manager.k8s.io/acme-challenge-type: http01
      cert-manager.io/cluster-issuer: letsencrypt
      certmanager.k8s.io/acme-http01-edit-in-place: "true"
    labels: {}
    tls:
      - secretName: tls-secret
        hosts:
          - ${HOSTNAME}

  # resources:
  resources:
    limits:
      cpu: "4"
      ephemeral-storage: 256Gi
      memory: 80Gi
      nvidia.com/gpu: "1"
    requests:
      cpu: "4"
      ephemeral-storage: 128Gi
      memory: 80Gi
      nvidia.com/gpu: "1"
  service:
    type: ClusterIP
