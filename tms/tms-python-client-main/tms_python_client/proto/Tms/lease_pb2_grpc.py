# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from tms_python_client.proto.Tms import lease_pb2 as proto_dot_Tms_dot_lease__pb2


class LeaseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Acquire = channel.unary_stream(
                '/triton.management.server.Lease/Acquire',
                request_serializer=proto_dot_Tms_dot_lease__pb2.LeaseAcquireRequest.SerializeToString,
                response_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseAcquireResponse.FromString,
                )
        self.List = channel.unary_stream(
                '/triton.management.server.Lease/List',
                request_serializer=proto_dot_Tms_dot_lease__pb2.LeaseListRequest.SerializeToString,
                response_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseStatusResponse.FromString,
                )
        self.Release = channel.unary_unary(
                '/triton.management.server.Lease/Release',
                request_serializer=proto_dot_Tms_dot_lease__pb2.LeaseReleaseRequest.SerializeToString,
                response_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseReleaseResponse.FromString,
                )
        self.Renew = channel.unary_unary(
                '/triton.management.server.Lease/Renew',
                request_serializer=proto_dot_Tms_dot_lease__pb2.LeaseRenewRequest.SerializeToString,
                response_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseRenewResponse.FromString,
                )
        self.Status = channel.unary_unary(
                '/triton.management.server.Lease/Status',
                request_serializer=proto_dot_Tms_dot_lease__pb2.LeaseStatusRequest.SerializeToString,
                response_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseStatusResponse.FromString,
                )


class LeaseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Acquire(self, request, context):
        """Requests the URN of a Triton Inference Server (TIS) with the requested set of models loaded and available.
        Lease state changes are streamed to the requester until all models are ready or are impossible to make ready.
        Requested model set maximum count of 128 models; requests which exceed this limit will result in an error.
        Requested models must include their TIS name and version, as well as the URN where the model can be acquired.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Requests a list of leases from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Release(self, request, context):
        """Requests the release of an acquired lease.
        Once released, the system may unload the model(s) so long as no other lease exists of the model(s).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Renew(self, request, context):
        """Requests the renewal of a lease.
        Lease renewals must happen prior to an existing lease expiring.
        Attempting to renew an expired lease will result in an error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Requests the status of a lease.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Acquire': grpc.unary_stream_rpc_method_handler(
                    servicer.Acquire,
                    request_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseAcquireRequest.FromString,
                    response_serializer=proto_dot_Tms_dot_lease__pb2.LeaseAcquireResponse.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseListRequest.FromString,
                    response_serializer=proto_dot_Tms_dot_lease__pb2.LeaseStatusResponse.SerializeToString,
            ),
            'Release': grpc.unary_unary_rpc_method_handler(
                    servicer.Release,
                    request_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseReleaseRequest.FromString,
                    response_serializer=proto_dot_Tms_dot_lease__pb2.LeaseReleaseResponse.SerializeToString,
            ),
            'Renew': grpc.unary_unary_rpc_method_handler(
                    servicer.Renew,
                    request_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseRenewRequest.FromString,
                    response_serializer=proto_dot_Tms_dot_lease__pb2.LeaseRenewResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=proto_dot_Tms_dot_lease__pb2.LeaseStatusRequest.FromString,
                    response_serializer=proto_dot_Tms_dot_lease__pb2.LeaseStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'triton.management.server.Lease', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Lease(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Acquire(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/triton.management.server.Lease/Acquire',
            proto_dot_Tms_dot_lease__pb2.LeaseAcquireRequest.SerializeToString,
            proto_dot_Tms_dot_lease__pb2.LeaseAcquireResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/triton.management.server.Lease/List',
            proto_dot_Tms_dot_lease__pb2.LeaseListRequest.SerializeToString,
            proto_dot_Tms_dot_lease__pb2.LeaseStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Release(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/triton.management.server.Lease/Release',
            proto_dot_Tms_dot_lease__pb2.LeaseReleaseRequest.SerializeToString,
            proto_dot_Tms_dot_lease__pb2.LeaseReleaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Renew(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/triton.management.server.Lease/Renew',
            proto_dot_Tms_dot_lease__pb2.LeaseRenewRequest.SerializeToString,
            proto_dot_Tms_dot_lease__pb2.LeaseRenewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/triton.management.server.Lease/Status',
            proto_dot_Tms_dot_lease__pb2.LeaseStatusRequest.SerializeToString,
            proto_dot_Tms_dot_lease__pb2.LeaseStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
